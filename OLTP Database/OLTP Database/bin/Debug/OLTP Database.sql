/*
Deployment script for OLTP Database

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "OLTP Database"
:setvar DefaultFilePrefix "OLTP Database"
:setvar DefaultDataPath "C:\Users\yurai\AppData\Local\Microsoft\VisualStudio\SSDT\OLTP Database"
:setvar DefaultLogPath "C:\Users\yurai\AppData\Local\Microsoft\VisualStudio\SSDT\OLTP Database"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping [dbo].[FK_Club_Id_Teams_Clubs]...';


GO
ALTER TABLE [dbo].[Teams] DROP CONSTRAINT [FK_Club_Id_Teams_Clubs];


GO
PRINT N'Dropping [dbo].[FK_Team_Manager_Id_Teams_Users]...';


GO
ALTER TABLE [dbo].[Teams] DROP CONSTRAINT [FK_Team_Manager_Id_Teams_Users];


GO
PRINT N'Altering [dbo].[Teams]...';


GO
ALTER TABLE [dbo].[Teams] ALTER COLUMN [ClubId] INT NULL;

ALTER TABLE [dbo].[Teams] ALTER COLUMN [TeamManagerId] INT NULL;


GO
PRINT N'Creating [dbo].[FK_Club_Id_Teams_Clubs]...';


GO
ALTER TABLE [dbo].[Teams] WITH NOCHECK
    ADD CONSTRAINT [FK_Club_Id_Teams_Clubs] FOREIGN KEY ([ClubId]) REFERENCES [dbo].[Clubs] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Team_Manager_Id_Teams_Users]...';


GO
ALTER TABLE [dbo].[Teams] WITH NOCHECK
    ADD CONSTRAINT [FK_Team_Manager_Id_Teams_Users] FOREIGN KEY ([TeamManagerId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Altering [dbo].[UserDelete]...';


GO
ALTER PROCEDURE [dbo].[UserDelete]
	@UserId INT
AS
BEGIN
	SET NOCOUNT ON
    SET XACT_ABORT ON

	BEGIN TRAN
		BEGIN TRY
			DECLARE @PurseId INT,
					@PassportId INT,
					@BankCardId INT
			SELECT TOP 1 @PurseId = [user].[PurseId], 
							@PassportId = [user].[PassportId],
							@BankCardId = [user].[BankCardId] 
								FROM [dbo].[Users] AS [user] WHERE [user].[Id] = @UserId 

			--deleting user account
			DELETE FROM [dbo].[Users] WHERE [Id] = @UserId

			-- deleting user purse
			IF(ISNULL(@PurseId, 0) <> 0)
				DELETE FROM [dbo].[Purses] WHERE [Id] = @PurseId
		
			-- deleting user bank card
			IF(ISNULL(@BankCardId, 0) <> 0)
				DELETE FROM [dbo].[BankCards] WHERE [Id] = @BankCardId

			-- deleting user passport and photos
			IF(ISNULL(@PassportId, 0) <> 0)
				BEGIN 
					DECLARE @UserPhotosId TABLE (
						[Id] INT NOT NULL PRIMARY KEY IDENTITY(1,1)
						,[PhotoId] INT NULL
					)

					INSERT INTO @UserPhotosId([PhotoId]) 
						SELECT [PhotoId]
							FROM ( SELECT TOP 1 [passport].[Id]
										,[passport].[PhotoPage1]
										,[passport].[PhotoPage2]
										,[passport].[PhotoIDOwner]
										,[passport].[PhotoOwnerWithPassport]
										,[passport].[PhotoRegistration] 
										FROM [dbo].[Passports] AS [passport]
										WHERE [passport].[Id] = @PassportId
									) AS passPhotos
									UNPIVOT (
										PhotoId FOR TempPhotoName
											IN([PhotoPage1], [PhotoPage2], [PhotoIDOwner]
												,[PhotoOwnerWithPassport], [PhotoRegistration] )

									) AS [unpivot]
					--deleting user photos
					DELETE FROM [dbo].[Photos] WHERE [Id] IN (SELECT [PhotoId] FROM @UserPhotosId) 
				
					--deleting user passport
					DELETE FROM [dbo].[Passports] WHERE [Id] = @PassportId
				END

			COMMIT
			IF (ISNULL(@PurseId, 0) <> 0)
				RETURN 1
			ELSE
				RETURN 0
		END TRY
		BEGIN CATCH
			IF (@@ERROR <> 0)
			BEGIN 
				ROLLBACK
				;THROW
			END
			RETURN 0
		END CATCH
END
GO
PRINT N'Altering [dbo].[UserRegistration]...';


GO
ALTER PROCEDURE [dbo].[UserRegistration]
	@FirstName NVARCHAR(255)
	,@LastName NVARCHAR(255)
	,@BirthDay DATE
	,@Email NVARCHAR(100)
	,@Phone NVARCHAR(15)
	,@HashPassword  NVARCHAR(200)
	,@EmailIsConfirmed BIT = 0
	,@PhoneIsConfirmed BIT = 0
	,@IsConfirmedAdministrations BIT = 0
	,@Language NVARCHAR(255) = N'English'
	,@Currency VARCHAR(3) = 'USD'
AS
BEGIN
	SET NOCOUNT ON
    SET XACT_ABORT ON

	DECLARE @UserId INT = -1
	BEGIN TRAN
		BEGIN TRY
			-- Creating user passport
			INSERT INTO [dbo].[Passports]([FirstName], [LastName], [BirthDay]) VALUES (@FirstName, @LastName, @BirthDay)
			DECLARE @PassportId INT = SCOPE_IDENTITY()
					,@Age INT = DATEDIFF ( YEAR , @BirthDay, GETDATE()) - (CASE WHEN GETDATE() < DATEADD(yyyy,DATEDIFF(yyyy,@BirthDay,GETDATE()),@BirthDay) THEN 1 ELSE 0 END)
			
			-- Creating user purse
			INSERT INTO [dbo].[Purses]([Currency]) VALUES (@Currency)
			DECLARE @PurseId INT = SCOPE_IDENTITY()

			-- Creatin user account
			INSERT INTO [dbo].[Users]( [PassportId]
									, [PurseId]
									, [RoleId]
									, [Email]
									, [Phone]
									, [HashPassword]
									, [Language]
									, [Age]
									, [EmailIsConfirmed]
									, [PhoneIsConfirmed]
									, [IsConfirmedAdministrations]) 
									VALUES (@PassportId
											, @PurseId
											, 1
											, @Email
											, @Phone
											, @HashPassword
											, @Language
											, @Age
											, @EmailIsConfirmed
											, @PhoneIsConfirmed
											, @IsConfirmedAdministrations)

			SET @UserId = SCOPE_IDENTITY()

			COMMIT
		END TRY
		BEGIN CATCH
			IF (@@ERROR <> 0)
			BEGIN
				ROLLBACK
				;THROW

			END
				
		END CATCH

	

	RETURN @UserId
END
GO
PRINT N'Creating [dbo].[TeamAdd]...';


GO
CREATE PROCEDURE [dbo].[TeamAdd]
	@ClubId INT
	,@TeamManagerId INT
	,@Name NVARCHAR(255)
AS
BEGIN
	SET NOCOUNT ON
    SET XACT_ABORT ON

	BEGIN TRAN
		BEGIN TRY
			INSERT INTO [dbo].[Teams]([ClubId], [TeamManagerId], [Name]) 
				VALUES (NULLIF(@ClubId, 0), NULLIF(@TeamManagerId, 0), @Name)
			DECLARE @TeamId INT = SCOPE_IDENTITY()
			COMMIT;
			RETURN @TeamId
		END TRY
		BEGIN CATCH
			IF (@@ERROR <> 0)
			BEGIN
				ROLLBACK
				;THROW
			END;
			RETURN -1
		END CATCH
END
GO
PRINT N'Creating [dbo].[TeamGet]...';


GO
CREATE PROCEDURE [dbo].[TeamGet]
	@TeamId INT = NULL
AS
BEGIN
	SET NOCOUNT ON
    SET XACT_ABORT ON

	BEGIN TRAN
		BEGIN TRY
			IF (@TeamId IS NULL)
			BEGIN
				SELECT * FROM [dbo].[Teams]
			END
			ELSE
			BEGIN
				SELECT TOP 1 * FROM [dbo].[Teams] WHERE [Id] = ISNULL(@TeamId, [Id])
			END
			COMMIT
		END TRY
		BEGIN CATCH
			IF (@@ERROR <> 0)
			BEGIN 
				ROLLBACK
				;THROW
			END
			RETURN NULL
		END CATCH

END
GO
PRINT N'Creating [dbo].[TeamRemove]...';


GO
CREATE PROCEDURE [dbo].[TeamRemove]
	@TeamId INT
AS
BEGIN
	SET NOCOUNT ON
    SET XACT_ABORT ON

	BEGIN TRAN
		BEGIN TRY
			DELETE FROM [dbo].[Teams] WHERE [Id] = @TeamId
			COMMIT
			RETURN 1
		END TRY
		BEGIN CATCH
			IF (@@ERROR <> 0)
			BEGIN 
				ROLLBACK
				;THROW
			END
			RETURN 0
		END CATCH
	
END
GO
PRINT N'Creating [dbo].[TeamUpdate]...';


GO
CREATE PROCEDURE [dbo].[TeamUpdate]
	 @TeamId INT
	,@ClubId INT = NULL
	,@TeamManagerId INT = NULL
	,@Name NVARCHAR(255) = NULL
AS
BEGIN
	SET NOCOUNT ON
    SET XACT_ABORT ON
	DECLARE @CountRow INT = 0
	BEGIN TRAN
		BEGIN TRY
			
			UPDATE [dbo].[Teams] SET [ClubId] = ISNULL(NULLIF(@ClubId, 0), [ClubId])
									,[TeamManagerId] = ISNULL(NULLIF(@TeamManagerId, 0), [TeamManagerId])
									,[Name] = ISNULL(@Name, [Name]) WHERE [Id] = @TeamId
			SET @CountRow = @@ROWCOUNT
			COMMIT
			IF (@CountRow > 0)
				RETURN 1
			ELSE 
				RETURN 0
		END TRY
		BEGIN CATCH
			IF (@@ERROR <> 0)
			BEGIN 
				ROLLBACK
				;THROW
			END
			RETURN 0
		END CATCH
END
GO
PRINT N'Creating [dbo].[UserUpdate]...';


GO
CREATE PROCEDURE [dbo].[UserUpdate]
	@UserId INT
	,@BirthDay DATE = NULL
	,@Email NVARCHAR(100) = NULL
	,@Phone NVARCHAR(15) = NULL
	,@HashPassword  NVARCHAR(200) = NULL
	,@EmailIsConfirmed BIT = NULL
	,@PhoneIsConfirmed BIT = NULL
	,@IsConfirmedAdministrations BIT = NULL
	,@Language NVARCHAR(255) = NULL
	,@RoleId INT = NULL
	,@LocationId INT = NULL
AS
BEGIN
	SET NOCOUNT ON
    SET XACT_ABORT ON

	BEGIN TRAN
		BEGIN TRY
			IF (@UserId IS NULL)
				THROW 51000, 'User ID can''t be empty.', 1;
			
			
			DECLARE @Age INT = NULL
					
			IF (@BirthDay IS NOT NULL)
					SET @Age = DATEDIFF ( YEAR , @BirthDay, GETDATE()) - (CASE WHEN GETDATE() < DATEADD(yyyy,DATEDIFF(yyyy,@BirthDay,GETDATE()),@BirthDay) THEN 1 ELSE 0 END)

			--DECLARE @PassportId INT = NULL
			--		,@PurseId INT = NULL
			--SELECT TOP 1 @PassportId = [PassportId], @PurseId = [PurseId] FROM [dbo].[Users] WHERE [Id] = @UserId

			---- updating user passport
			--UPDATE [dbo].[Passports] 
			--	SET [FirstName] = N''
			--	, [LastName]  = N''
			--	, [BirthDay]  = N''
			--	WHERE [Id] = @PassportId
				
			
					
			
			---- updating user purse
			--IF (@PurseId IS NOT NULL)
			--	UPDATE [dbo].[Purses] SET [Currency] = @Currency WHERE [Id] = @PurseId
			
			-- updating user account
			UPDATE [dbo].[Users] SET 
									[RoleId] = ISNULL(NULLIF(@RoleId, 0), [RoleId])
									, [Email] = ISNULL(@Email, [Email])
									, [Phone] = ISNULL(@Phone, [Phone])
									, [HashPassword] = ISNULL(@HashPassword, [HashPassword])
									, [Language] = ISNULL(@Language, [Language])
									, [Age] = ISNULL(@Age, [Age])
									, [EmailIsConfirmed] = ISNULL(@EmailIsConfirmed, [EmailIsConfirmed])
									, [PhoneIsConfirmed] = ISNULL(@PhoneIsConfirmed, [PhoneIsConfirmed])
									, [IsConfirmedAdministrations] = ISNULL(@IsConfirmedAdministrations, [IsConfirmedAdministrations])
									WHERE [Id] = @UserId
			COMMIT
			RETURN 1
		END TRY
		BEGIN CATCH
			IF (@@ERROR <> 0)
			BEGIN
				ROLLBACK
				;THROW
			END
			RETURN 0
		END CATCH	
END
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Teams] WITH CHECK CHECK CONSTRAINT [FK_Club_Id_Teams_Clubs];

ALTER TABLE [dbo].[Teams] WITH CHECK CHECK CONSTRAINT [FK_Team_Manager_Id_Teams_Users];


GO
PRINT N'Update complete.';


GO
