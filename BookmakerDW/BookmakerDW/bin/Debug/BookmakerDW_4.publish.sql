/*
Deployment script for BookmakerDW

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "BookmakerDW"
:setvar DefaultFilePrefix "BookmakerDW"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[DimDate]...';


GO
CREATE TABLE [dbo].[DimDate] (
    [Id]                   INT           NOT NULL,
    [FullDate]             DATE          NOT NULL,
    [Year]                 SMALLINT      NOT NULL,
    [MonthEnglishName]     NVARCHAR (15) NOT NULL,
    [MonthNumberOfYear]    TINYINT       NOT NULL,
    [DayOfWeekEngilshName] NVARCHAR (15) NOT NULL,
    [DayNumberOfMonth]     TINYINT       NOT NULL,
    [CalendarQuarter]      TINYINT       NOT NULL,
    [CalendarSemester]     TINYINT       NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[DimLocation]...';


GO
CREATE TABLE [dbo].[DimLocation] (
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [City]      NVARCHAR (500) NOT NULL,
    [State]     NVARCHAR (500) NOT NULL,
    [Country]   NVARCHAR (500) NOT NULL,
    [CreatedAt] DATETIME2 (7)  NOT NULL,
    CONSTRAINT [PK_Location_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[DimMatch]...';


GO
CREATE TABLE [dbo].[DimMatch] (
    [Id]            INT            IDENTITY (1, 1) NOT NULL,
    [HomeTeam]      NVARCHAR (255) NOT NULL,
    [AwayTeam]      NVARCHAR (255) NOT NULL,
    [NameMatch]     NVARCHAR (520) NOT NULL,
    [IsStarted]     BIT            NOT NULL,
    [ScoreHomeTeam] INT            NOT NULL,
    [ScoreAwayTeam] INT            NOT NULL,
    [Date]          DATETIME2 (7)  NOT NULL,
    CONSTRAINT [PK_Matche_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[DimSport]...';


GO
CREATE TABLE [dbo].[DimSport] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [Name]        NVARCHAR (255) NOT NULL,
    [Description] NVARCHAR (800) NULL,
    [CreatedAt]   DATETIME2 (7)  NOT NULL,
    CONSTRAINT [PK_Sport_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[DimTournament]...';


GO
CREATE TABLE [dbo].[DimTournament] (
    [Id]               INT            IDENTITY (1, 1) NOT NULL,
    [Name]             NVARCHAR (255) NOT NULL,
    [OrganizationName] NVARCHAR (255) NULL,
    [Description]      NVARCHAR (800) NULL,
    [CreatedAt]        DATETIME2 (7)  NOT NULL,
    CONSTRAINT [PK_Tournaments_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[DimUser]...';


GO
CREATE TABLE [dbo].[DimUser] (
    [Id]                         INT            IDENTITY (1, 1) NOT NULL,
    [PassportCode]               VARCHAR (15)   NULL,
    [Series]                     NVARCHAR (5)   NULL,
    [BirthDay]                   DATE           NULL,
    [FirstName]                  NVARCHAR (255) NOT NULL,
    [LastName]                   NVARCHAR (255) NOT NULL,
    [Language]                   NVARCHAR (255) NOT NULL,
    [Email]                      NVARCHAR (100) NOT NULL,
    [Phone]                      NVARCHAR (15)  NOT NULL,
    [Age]                        INT            NOT NULL,
    [EmailIsConfirmed]           BIT            NOT NULL,
    [PhoneIsConfirmed]           BIT            NOT NULL,
    [IsConfirmedAdministrations] BIT            NOT NULL,
    CONSTRAINT [PK_User_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[FactFinance]...';


GO
CREATE TABLE [dbo].[FactFinance] (
    [Id]          INT           IDENTITY (1, 1) NOT NULL,
    [MatchId]     INT           NOT NULL,
    [UserId]      INT           NOT NULL,
    [DateId]      INT           NOT NULL,
    [Tax]         FLOAT (53)    NOT NULL,
    [Profit]      MONEY         NOT NULL,
    [ResultIsWin] BIT           NULL,
    [CreatedAt]   DATETIME2 (7) NOT NULL,
    CONSTRAINT [PK_Bet_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[StatisticByCards]...';


GO
CREATE TABLE [dbo].[StatisticByCards] (
    [ConnectorKey] NVARCHAR (300) NOT NULL,
    [CardType]     NVARCHAR (255) NOT NULL,
    [NamePlayer]   NVARCHAR (300) NOT NULL,
    [NameTeam]     NVARCHAR (300) NOT NULL,
    [Count]        INT            NOT NULL,
    [CreatedAt]    DATETIME2 (7)  NOT NULL,
    CONSTRAINT [PK_StatisticByCards_Id] PRIMARY KEY CLUSTERED ([ConnectorKey] ASC)
);


GO
PRINT N'Creating [dbo].[DF_Created_At_DimLocation]...';


GO
ALTER TABLE [dbo].[DimLocation]
    ADD CONSTRAINT [DF_Created_At_DimLocation] DEFAULT GETDATE() FOR [CreatedAt];


GO
PRINT N'Creating [dbo].[DF_Is_Started_Matches]...';


GO
ALTER TABLE [dbo].[DimMatch]
    ADD CONSTRAINT [DF_Is_Started_Matches] DEFAULT 0 FOR [IsStarted];


GO
PRINT N'Creating [dbo].[DF_ScoreHomeTeam_Matches]...';


GO
ALTER TABLE [dbo].[DimMatch]
    ADD CONSTRAINT [DF_ScoreHomeTeam_Matches] DEFAULT 0 FOR [ScoreHomeTeam];


GO
PRINT N'Creating [dbo].[DF_ScoreAwayTeam_Matches]...';


GO
ALTER TABLE [dbo].[DimMatch]
    ADD CONSTRAINT [DF_ScoreAwayTeam_Matches] DEFAULT 0 FOR [ScoreAwayTeam];


GO
PRINT N'Creating [dbo].[DF_Created_At_DimSport]...';


GO
ALTER TABLE [dbo].[DimSport]
    ADD CONSTRAINT [DF_Created_At_DimSport] DEFAULT GETDATE() FOR [CreatedAt];


GO
PRINT N'Creating [dbo].[DF_Created_At_DimTournament]...';


GO
ALTER TABLE [dbo].[DimTournament]
    ADD CONSTRAINT [DF_Created_At_DimTournament] DEFAULT GETDATE() FOR [CreatedAt];


GO
PRINT N'Creating [dbo].[DF_Created_At_FactFinance]...';


GO
ALTER TABLE [dbo].[FactFinance]
    ADD CONSTRAINT [DF_Created_At_FactFinance] DEFAULT GETDATE() FOR [CreatedAt];


GO
PRINT N'Creating [dbo].[DF_Count_StatisticByCards]...';


GO
ALTER TABLE [dbo].[StatisticByCards]
    ADD CONSTRAINT [DF_Count_StatisticByCards] DEFAULT 0 FOR [Count];


GO
PRINT N'Creating [dbo].[DF_Create_At_StatisticByCards]...';


GO
ALTER TABLE [dbo].[StatisticByCards]
    ADD CONSTRAINT [DF_Create_At_StatisticByCards] DEFAULT GETDATE() FOR [CreatedAt];


GO
PRINT N'Creating [dbo].[FK_Match_FactFinance_Events]...';


GO
ALTER TABLE [dbo].[FactFinance]
    ADD CONSTRAINT [FK_Match_FactFinance_Events] FOREIGN KEY ([MatchId]) REFERENCES [dbo].[DimMatch] ([Id]);


GO
PRINT N'Creating [dbo].[FK_User_FactFinance_Users]...';


GO
ALTER TABLE [dbo].[FactFinance]
    ADD CONSTRAINT [FK_User_FactFinance_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[DimUser] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Date_FactFinance_DimDate]...';


GO
ALTER TABLE [dbo].[FactFinance]
    ADD CONSTRAINT [FK_Date_FactFinance_DimDate] FOREIGN KEY ([DateId]) REFERENCES [dbo].[DimDate] ([Id]);


GO
PRINT N'Creating [dbo].[CK_User_Age_DimUser]...';


GO
ALTER TABLE [dbo].[DimUser]
    ADD CONSTRAINT [CK_User_Age_DimUser] CHECK ([Age] >= 18);


GO
PRINT N'Creating [dbo].[FillDimDate]...';


GO
CREATE PROCEDURE [dbo].[FillDimDate]
	@fromYear SMALLINT = 2018
	,@fromMonth TINYINT = 1
	,@fromDay TINYINT = 1
AS
BEGIN
	BEGIN TRAN
	BEGIN TRY
		DECLARE @fromDate DATE =  TRY_CONVERT(DATE, CONCAT(@fromYear, N'/', @fromMonth, N'/', @fromDay));
		DECLARE @toDate DATE = DATEADD(YEAR, 10, @fromDate);
		
		;WITH RangeDate([Date]) AS (
			SELECT @fromDate AS [Date]
				UNION ALL
				SELECT DATEADD(DAY, 1, [Date]) FROM RangeDate
				WHERE DATEADD(DAY, 1, [Date]) < @toDate
		)
		INSERT INTO [dbo].[DimDate](
			[Id]
			,[FullDate]
			,[Year]
			,[MonthEnglishName]
			,[MonthNumberOfYear]
			,[DayOfWeekEngilshName]
			,[DayNumberOfMonth]
			,[CalendarQuarter]
			,[CalendarSemester]) 
				SELECT CONVERT(INT, FORMAT([DATE], 'yyyyMMdd')) AS [DateID]
						,[DATE]
						,YEAR([DATE])
						,DATENAME(MONTH, [DATE])
						,MONTH([DATE])
						,DATENAME(WEEKDAY, [DATE])
						,DAY([DATE])
						,DATEPART(QUARTER, [DATE])
						,((DATEPART(QUARTER,[DATE])-1)/2)+1
							FROM RangeDate
				OPTION(MAXRECURSION 4000)

		COMMIT
	END TRY
	BEGIN CATCH
		IF (@@ERROR <> 0)
			ROLLBACK;		
		THROW;
	END CATCH
END;
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/


EXEC [dbo].[FillDimDate]
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
